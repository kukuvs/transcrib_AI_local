[
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AudioSplitter",
        "importPath": "AudioSplitter",
        "description": "AudioSplitter",
        "isExtraImport": true,
        "detail": "AudioSplitter",
        "documentation": {}
    },
    {
        "label": "AudioSplitter",
        "importPath": "AudioSplitter",
        "description": "AudioSplitter",
        "isExtraImport": true,
        "detail": "AudioSplitter",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "FileManager",
        "importPath": "FileManager",
        "description": "FileManager",
        "isExtraImport": true,
        "detail": "FileManager",
        "documentation": {}
    },
    {
        "label": "FileManager",
        "importPath": "FileManager",
        "description": "FileManager",
        "isExtraImport": true,
        "detail": "FileManager",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "process_audio_files",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "cpu_count",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "WhisperTranscriber",
        "importPath": "WhisperTranscriber",
        "description": "WhisperTranscriber",
        "isExtraImport": true,
        "detail": "WhisperTranscriber",
        "documentation": {}
    },
    {
        "label": "whisper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "whisper",
        "description": "whisper",
        "detail": "whisper",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "TestAudioSplitter",
        "kind": 6,
        "importPath": "src.test.TestAudioSplitter",
        "description": "src.test.TestAudioSplitter",
        "peekOfCode": "class TestAudioSplitter:\n    def test_split_audio(self):\n        # Создаем объект AudioSplitter с split_parts=3\n        splitter = AudioSplitter(3)\n        # Создаем временный файл для тестирования\n        with patch('pydub.AudioSegment.from_file') as mock_from_file:\n            mock_from_file.return_value = AudioSegment.empty()\n            file_path = 'test.mp3'\n            output_dir = 'test_dir'\n            # Вызываем метод split_audio",
        "detail": "src.test.TestAudioSplitter",
        "documentation": {}
    },
    {
        "label": "TestFileManager",
        "kind": 6,
        "importPath": "src.test.TestFileManager",
        "description": "src.test.TestFileManager",
        "peekOfCode": "class TestFileManager:\n    def test_write_text_to_file(self):\n        # Тестирует запись непустого текста в файл\n        with patch('builtins.open') as mock_open:\n            mock_open.return_value.__enter__.return_value.write.return_value = None\n            text = 'Hello, world!'\n            filename = 'test.txt'\n            # Вызываем метод write_text_to_file с непустым текстом\n            FileManager.write_text_to_file(text, filename)\n            # Проверяем, что метод open был вызван с правильными аргументами",
        "detail": "src.test.TestFileManager",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "src.veu.App",
        "description": "src.veu.App",
        "peekOfCode": "class App:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Audio Transcription App\")\n        self.root.geometry(\"500x400\")\n        # Переменные для путей\n        self.input_file_path = tk.StringVar()\n        self.output_dir_path = tk.StringVar()\n        self.split_parts = tk.IntVar(value=3)\n        # Выбор файла для распознавания",
        "detail": "src.veu.App",
        "documentation": {}
    },
    {
        "label": "AudioSplitter",
        "kind": 6,
        "importPath": "src.AudioSplitter",
        "description": "src.AudioSplitter",
        "peekOfCode": "class AudioSplitter:\n    def __init__(self, split_parts=3):\n        if split_parts <= 0 or not isinstance(split_parts, int) :\n            raise ValueError(\"Number of split parts must be greater than 0\")\n        self.split_parts = split_parts\n    def split_audio(self, file_path, output_dir):\n        \"\"\"\n        Дробит аудиофайл на указанное количество частей и сохраняет их в указанной директории.\n        \"\"\"\n        # Создаем директорию, если её нет",
        "detail": "src.AudioSplitter",
        "documentation": {}
    },
    {
        "label": "FileManager",
        "kind": 6,
        "importPath": "src.FileManager",
        "description": "src.FileManager",
        "peekOfCode": "class FileManager:\n    @staticmethod\n    def write_text_to_file(text, filename):\n        if not text or None:  # Проверка на пустой текст или None\n            return\n        with open(filename, \"a\", encoding=\"utf-8\") as file:\n            file.write(text)",
        "detail": "src.FileManager",
        "documentation": {}
    },
    {
        "label": "process_audio_file",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def process_audio_file(args):\n    \"\"\"\n    Обрабатывает один аудиофайл: транскрибирует и записывает результат.\n    \"\"\"\n    file_path, output_dir_path = args\n    transcriber = WhisperTranscriber()\n    file_manager = FileManager()\n    try:\n        # Транскрибируем аудиофайл\n        text = transcriber.transcribe_audio(file_path)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "process_audio_files",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def process_audio_files(input_file_path, output_dir_path, split_parts, progress_callback=None):\n    \"\"\"\n    Основной процесс обработки аудиофайлов: дробление, транскрипция и сохранение текста.\n    \"\"\"\n    # Инициализация компонентов\n    splitter = AudioSplitter(split_parts)\n    res_dir = os.path.join(output_dir_path, \"res\")\n    os.makedirs(res_dir, exist_ok=True)\n    # Дробим аудиофайл\n    sliced_files = splitter.split_audio(input_file_path, res_dir)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "WhisperTranscriber",
        "kind": 6,
        "importPath": "src.WhisperTranscriber",
        "description": "src.WhisperTranscriber",
        "peekOfCode": "class WhisperTranscriber:\n    def __init__(self, device=\"cuda\" if torch.cuda.is_available() else \"cpu\"):\n        self.device = device\n        self.model = whisper.load_model(\"small\", device=self.device)\n    def transcribe_audio(self, file_name):\n        \"\"\"\n        Транскрибирует аудиофайл и возвращает текст.\n        \"\"\"\n        result = self.model.transcribe(file_name)\n        return result[\"text\"]",
        "detail": "src.WhisperTranscriber",
        "documentation": {}
    }
]